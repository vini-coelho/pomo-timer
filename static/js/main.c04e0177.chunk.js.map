{"version":3,"sources":["styles/global.ts","components/ProgressBar/styles.ts","components/ProgressBar/index.tsx","utils/PomodoroModes.ts","utils/formatTimeDisplay.ts","pages/PomoTimer/styles.ts","pages/PomoTimer/index.tsx","index.tsx"],"names":["createGlobalStyle","Svg","styled","svg","BackgroundCircle","circle","Circle","Time","text","Label","ProgressBar","size","progress","strokeWidth","circleOneStroke","circleTwoStroke","time","label","useState","offset","setOffset","center","radius","circumference","Math","PI","useEffect","width","height","stroke","cx","cy","r","strokeDasharray","strokeDashoffset","x","y","title","formatTimer","seconds","min","floor","sec","Container","div","Title","span","ButtonArea","Button","button","p","visible","SelectButton","active","Footer","footer","PomoTimer","PomodoroModes","totalTime","setTotalTime","currentTime","setCurrentTime","running","setRunning","paused","setPaused","mode","setMode","interv","useRef","resetTimer","clearInterval","current","map","item","key","onClick","changeMode","formatTimeDisplay","timer","setInterval","prevtime","startTimer","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAEeA,cAAf,6f,eCMaC,GANYC,IAAOC,IAAV,yFAMHD,IAAOC,IAAV,0FAMHC,EAAmBF,IAAOG,OAAV,2CAIhBC,EAASJ,IAAOG,OAAV,+FAKNE,EAAOL,IAAOM,KAAV,+FAMJC,EAAQP,IAAOM,KAAV,yH,OCiCHE,EAhDsB,SAAC,GAQ/B,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,SACAC,EAKI,EALJA,YACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,KACAC,EACI,EADJA,MACI,EACwBC,mBAAS,GADjC,mBACGC,EADH,KACWC,EADX,KAGEC,EAASV,EAAO,EAChBW,EAASX,EAAO,EAAIE,EAAc,EAClCU,EAAgB,EAAIC,KAAKC,GAAKH,EAOpC,OALAI,qBAAU,WAERN,GADyB,IAAMR,GAAY,IAAOW,KAEjD,CAACH,EAAWG,EAAeX,EAAUO,IAGtC,eAAClB,EAAD,CAAK0B,MAAOhB,EAAMiB,OAAQjB,EAA1B,UACE,cAACP,EAAD,CACEyB,OAAQf,EACRgB,GAAIT,EACJU,GAAIV,EACJW,EAAGV,EACHT,YAAaA,IAEf,cAACP,EAAD,CACEuB,OAAQd,EACRe,GAAIT,EACJU,GAAIV,EACJW,EAAGV,EACHW,gBAAiBV,EACjBW,iBAAkBf,EAClBN,YAAaA,IAEf,cAACN,EAAD,CAAM4B,EAAGd,EAAQe,EAAGf,EAApB,SACGL,IAEH,cAACP,EAAD,CAAO0B,EAAGd,EAAQe,EAAGf,EAAS,GAA9B,SACGJ,QCxDM,GACb,CAAEoB,MAAO,WAAYrB,KAAM,KAAMC,MAAO,iBACxC,CAAEoB,MAAO,cAAerB,KAAM,IAAKC,MAAO,iBAC1C,CAAEoB,MAAO,aAAcrB,KAAM,IAAKC,MAAO,kBCI5BqB,EAPkC,SAACC,GAChD,IAAMC,EAAMhB,KAAKiB,MAAMF,EAAU,IAC3BG,EAAMlB,KAAKiB,MAAMF,EAAU,IAEjC,MAAM,GAAN,OAAUC,EAAM,EAAN,WAAcA,GAAQA,EAAhC,YAAuCE,EAAM,EAAN,WAAcA,GAAQA,ICElDC,EAAYzC,IAAO0C,IAAV,6KAWTC,EAAQ3C,IAAO4C,KAAV,2EAKLC,EAAa7C,IAAO0C,IAAV,8CAIVI,EAAS9C,IAAO+C,OAAV,iSAGN,SAAAC,GAAC,OAAKA,EAAEC,QAAU,QAAU,UAyB5BC,EAAelD,IAAO+C,OAAV,gWAEW,SAAAC,GAAC,OAAKA,EAAEG,OAAS,GAAM,MAiB9CC,EAASpD,IAAOqD,OAAV,oYCoDJC,EA3Ga,WAAM,MAEEtC,mBAASuC,EAAc,GAAGzC,MAF5B,mBAEzB0C,EAFyB,KAEdC,EAFc,OAGMzC,mBAASwC,GAHf,mBAGzBE,EAHyB,KAGZC,EAHY,OAIR3C,oBAAS,GAJD,gCAKFA,oBAAS,IALP,mBAKzB4C,EALyB,KAKhBC,EALgB,OAMJ7C,oBAAS,GANL,mBAMzB8C,EANyB,KAMjBC,EANiB,OAQR/C,mBAAS,GARD,mBAQzBgD,EARyB,KAQnBC,EARmB,KAU1BC,EAASC,iBAAO,IAEhBzD,EAAYY,KAAKiB,MAAMmB,GAAeF,EAAa,IAEzD,SAASY,IACPL,GAAU,GACVF,GAAW,GACXF,EAAeH,GAEfa,cAAcH,EAAOI,SAsCvB,OATA9C,qBAAU,WACJkC,EAAc,IAChBG,GAAW,GACXE,GAAU,GACVJ,EAAeH,GACfY,OAED,CAACV,EAAaC,EAAgBC,EAASC,IAGxC,eAAC,EAAD,WACE,eAAClB,EAAD,kBACM,8CAEN,cAACE,EAAD,UACGU,EAAcgB,KAAI,SAACC,EAAMC,GAAP,OACjB,cAACvB,EAAD,CAEEC,OAAQa,IAASS,EACjBC,QAAS,kBA5BnB,SAAoBV,GAClBP,EAAaF,EAAcS,GAAMlD,MACjC6C,EAAeJ,EAAcS,GAAMlD,MACnCmD,EAAQD,GACRD,GAAU,GACVF,GAAW,GACXQ,cAAcH,EAAOI,SAsBEK,CAAWF,IAH5B,SAKGD,EAAKrC,OAJDsC,QAQX,cAAC,EAAD,CACE/D,SAAUA,EACVK,MAAOwC,EAAcS,GAAMjD,MAC3BD,KAAM8D,EAAkBlB,GACxBjD,KAAM,IACNE,YAAa,EACbC,gBAAgB,wBAChBC,gBAAgB,YAElB,eAACgC,EAAD,WACE,cAACC,EAAD,CAAQG,SAAUW,EAASc,QAAS,kBA7D1C,WACEb,GAAW,GACXE,GAAU,GAEV,IAAMc,EAAQC,aAAY,WACxBnB,GAAe,SAAAoB,GAAQ,OAAIA,EAAW,SACrC,IAEHb,EAAOI,QAAUO,EAqD6BG,IAA1C,SACGlB,EAAS,SAAW,UAEvB,cAAChB,EAAD,CAAQG,QAASa,EAAQY,QAAS,kBAAMN,KAAxC,mBAGA,cAACtB,EAAD,CAAQG,QAASW,EAASc,QAAS,kBAvDvCL,cAAcH,EAAOI,SACrBT,GAAW,QACXE,GAAU,IAqDN,sBAIF,eAACX,EAAD,WACE,cAAC,IAAD,IACA,mBACE6B,KAAK,gCACLC,OAAO,SACPC,IAAI,aAHN,yDC5GRC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c04e0177.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n  }\n  html, body, #root {\n    max-height: 100vh;\n    max-width: 100vw;\n    width: 100%;\n    height: 100%;\n  }\n  *, button, input {\n    border: 0;\n    background: none;\n    font-family: 'Montserrat', sans-serif;\n  }\n  html {\n    background: var(--background);\n  }\n  :root {\n    --primary: #403D39;\n    --background: #ff495c;\n    --white: #ffffff;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.svg`\n  display: block;\n  margin: 20px auto;\n  max-width: 100%;\n`;\n\nexport const Svg = styled.svg`\n  display: block;\n  margin: 20px auto;\n  max-width: 100%;\n`;\n\nexport const BackgroundCircle = styled.circle`\n  fill: none;\n`;\n\nexport const Circle = styled.circle`\n  fill: none;\n  transition: stroke-dashoffset 850ms ease-in-out;\n`;\n\nexport const Time = styled.text`\n  fill: var(--white);\n  text-anchor: middle;\n  font-size: 3rem;\n`;\n\nexport const Label = styled.text`\n  fill: var(--white);\n  text-anchor: middle;\n  margin-top: 100px;\n  font-size: 0.875rem;\n`;\n","import React, { useEffect, useState } from 'react';\n\nimport { Svg, BackgroundCircle, Circle, Time, Label } from './styles';\n\ninterface Props {\n  size: number;\n  progress: number;\n  strokeWidth: number;\n  circleOneStroke: string;\n  circleTwoStroke: string;\n  time: string;\n  label: string;\n}\n\nconst ProgressBar: React.FC<Props> = ({\n  size,\n  progress,\n  strokeWidth,\n  circleOneStroke,\n  circleTwoStroke,\n  time,\n  label\n}) => {\n  const [offset, setOffset] = useState(0);\n\n  const center = size / 2;\n  const radius = size / 2 - strokeWidth / 2;\n  const circumference = 2 * Math.PI * radius;\n\n  useEffect(() => {\n    const progressOffset = ((100 - progress) / 100) * circumference;\n    setOffset(progressOffset);\n  }, [setOffset, circumference, progress, offset]);\n\n  return (\n    <Svg width={size} height={size}>\n      <BackgroundCircle\n        stroke={circleOneStroke}\n        cx={center}\n        cy={center}\n        r={radius}\n        strokeWidth={strokeWidth}\n      />\n      <Circle\n        stroke={circleTwoStroke}\n        cx={center}\n        cy={center}\n        r={radius}\n        strokeDasharray={circumference}\n        strokeDashoffset={offset}\n        strokeWidth={strokeWidth}\n      />\n      <Time x={center} y={center}>\n        {time}\n      </Time>\n      <Label x={center} y={center + 30}>\n        {label}\n      </Label>\n    </Svg>\n  );\n};\n\nexport default ProgressBar;\n","export default [\n  { title: 'pomodoro', time: 1500, label: 'Time to work!' },\n  { title: 'short break', time: 300, label: 'Take a break!' },\n  { title: 'long break', time: 900, label: 'Take a break!' }\n];\n","const formatTimer: (seconds: number) => string = (seconds: number) => {\n  const min = Math.floor(seconds / 60);\n  const sec = Math.floor(seconds % 60);\n\n  return `${min < 9 ? `0${min}` : min}:${sec < 9 ? `0${sec}` : sec}`;\n};\n\nexport default formatTimer;\n","import styled from 'styled-components';\n\ninterface ButtonProps {\n  visible?: boolean;\n}\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n\n  height: 100%;\n\n  padding: 20px 0;\n`;\n\nexport const Title = styled.span`\n  font-size: 2.25rem;\n  color: var(--white);\n`;\n\nexport const ButtonArea = styled.div`\n  display: flex;\n`;\n\nexport const Button = styled.button<ButtonProps>`\n  outline: none;\n\n  display: ${p => (p.visible ? 'block' : 'none')};\n\n  transition: opacity 300ms;\n\n  background: none;\n  font-size: 2.25rem;\n  color: var(--white);\n\n  margin: 0 10px;\n\n  cursor: pointer;\n\n  &:hover {\n    opacity: 50%;\n  }\n\n  &:active {\n    opacity: 30%;\n  }\n`;\n\ninterface SelectButtonProps {\n  active?: boolean;\n}\n\nexport const SelectButton = styled.button<SelectButtonProps>`\n  outline: none;\n  background: rgba(255, 255, 255, ${p => (p.active ? 0.8 : 0.5)});\n  height: 2.5rem;\n  width: 8.75rem;\n  border-radius: 0.25rem;\n  margin: 0 5px;\n\n  color: var(--primary);\n  font-size: 0.875rem;\n\n  &:hover {\n    background: rgba(255, 255, 255, 0.3);\n  }\n\n  cursor: pointer;\n  transition: background 200ms ease-in-out;\n`;\n\nexport const Footer = styled.footer`\n  /* padding: 0 20px; */\n  display: flex;\n  align-items: center;\n  /* position: absolute; */\n  /* bottom: 0; */\n  /* left: 0; */\n  a {\n    font-family: 'Montserrat';\n    font-size: 0.75rem;\n    color: var(--white);\n    text-decoration: none;\n    margin-left: 10px;\n  }\n\n  svg {\n    fill: var(--white);\n    height: 20px;\n    width: 20px;\n  }\n`;\n","import React, { useEffect, useState, useRef } from 'react';\n\nimport { FaGithub } from 'react-icons/fa';\n\nimport ProgressBar from '../../components/ProgressBar';\n\nimport PomodoroModes from '../../utils/PomodoroModes';\nimport formatTimeDisplay from '../../utils/formatTimeDisplay';\n\nimport {\n  Container,\n  Title,\n  Button,\n  ButtonArea,\n  SelectButton,\n  Footer\n} from './styles';\n\nconst PomoTimer: React.FC = () => {\n  // const [progress, setProgress] = useState(100);\n  const [totalTime, setTotalTime] = useState(PomodoroModes[0].time);\n  const [currentTime, setCurrentTime] = useState(totalTime);\n  const [loop, setLoop] = useState(false);\n  const [running, setRunning] = useState(false);\n  const [paused, setPaused] = useState(false);\n  // 0: pomodoro; 1: short break; 2: long break;\n  const [mode, setMode] = useState(0);\n\n  const interv = useRef({} as NodeJS.Timeout);\n\n  const progress = (Math.floor(currentTime) / totalTime) * 100;\n\n  function resetTimer() {\n    setPaused(false);\n    setRunning(false);\n    setCurrentTime(totalTime);\n\n    clearInterval(interv.current);\n  }\n\n  function startTimer() {\n    setRunning(true);\n    setPaused(false);\n\n    const timer = setInterval(() => {\n      setCurrentTime(prevtime => prevtime - 0.01);\n    }, 10);\n\n    interv.current = timer;\n  }\n\n  function pauseTimer() {\n    clearInterval(interv.current);\n    setRunning(false);\n    setPaused(true);\n  }\n\n  function changeMode(mode: number) {\n    setTotalTime(PomodoroModes[mode].time);\n    setCurrentTime(PomodoroModes[mode].time);\n    setMode(mode);\n    setPaused(false);\n    setRunning(false);\n    clearInterval(interv.current);\n  }\n\n  useEffect(() => {\n    if (currentTime < 0) {\n      setRunning(false);\n      setPaused(false);\n      setCurrentTime(totalTime);\n      resetTimer();\n    }\n  }, [currentTime, setCurrentTime, running, setRunning]);\n\n  return (\n    <Container>\n      <Title>\n        pomo<strong>timer</strong>\n      </Title>\n      <ButtonArea>\n        {PomodoroModes.map((item, key) => (\n          <SelectButton\n            key={key}\n            active={mode === key}\n            onClick={() => changeMode(key)}\n          >\n            {item.title}\n          </SelectButton>\n        ))}\n      </ButtonArea>\n      <ProgressBar\n        progress={progress}\n        label={PomodoroModes[mode].label}\n        time={formatTimeDisplay(currentTime)}\n        size={280}\n        strokeWidth={6}\n        circleOneStroke='rgba(255,255,255,0.3)'\n        circleTwoStroke='#ffffff'\n      />\n      <ButtonArea>\n        <Button visible={!running} onClick={() => startTimer()}>\n          {paused ? 'RESUME' : 'START'}\n        </Button>\n        <Button visible={paused} onClick={() => resetTimer()}>\n          RESET\n        </Button>\n        <Button visible={running} onClick={() => pauseTimer()}>\n          PAUSE\n        </Button>\n      </ButtonArea>\n      <Footer>\n        <FaGithub />\n        <a\n          href='http://github.com/vini-coelho'\n          target='_blank'\n          rel='noreferrer'\n        >\n          Made with ♥ by Vinicius Coelho.\n        </a>\n      </Footer>\n    </Container>\n  );\n};\n\nexport default PomoTimer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GlobalStyles from './styles/global';\nimport App from './pages/PomoTimer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}